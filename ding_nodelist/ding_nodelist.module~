<?php
/**
 * @file
 * Helps creating customizable lists of content
 * that can be placed anywhere as a block
 */

  define('NL_SINGLE', 'single');
  define('NL_LIST', 'item_list');
  define('NL_CAROUSEL', 'carousel');
  define('NL_CAROUSEL_ALT', 'carousel_alt');

  define('NL_COL_FULL', 'full');
  define('NL_COL_HALF', 'half');
  define('NL_COL_THIRD', 'third');
  define('NL_COL_QRT', 'quarter');

function ding_nodelist_get_column_map() {
  return array(
    NL_COL_FULL   => 1,
    NL_COL_HALF   => 2,
    NL_COL_THIRD  => 3,
    NL_COL_QRT    => 4,
  );
}

/**
 * Implements hook_menu().
 */
// This block-menu will appear in administer settings
function ding_nodelist_menu() {
  $items = array();
  $items['ding_nodelist/autocomplete/%'] = array(
    'page callback' => 'ding_nodelist_autocomplete',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 * This lets ctools know to scan the module for a content_type plugin file.
 */
function ding_nodelist_ctools_plugin_directory($module, $plugin) {
  // we'll be nice and limit scandir() calls
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/content_types';
  }
}

function ding_nodelist_content_type_edit_form($form, &$form_state) {

  // Caching form for correct workflow
  $form_state['cache'] = TRUE;

  if (isset($form_state['values']['selected_nodes_count'])) {
    $node_count = $form_state['values']['selected_nodes_count'];
  }
  else {
    $node_count = empty($form_state['values']['selected_nodes']) ? 1 : count($form_state['values']['selected_nodes']);
  }

  $conf = $form_state['conf'];
  drupal_add_js(drupal_get_path('modules', 'ding_nodelist') . '/js/admin.js', 'file');

  $node_types = node_type_get_names();
  if (empty($node_types)) {
    drupal_set_message(t('No content types were found, please add one first.'), 'error', FALSE);
  }

  $list_types = array(
    NL_SINGLE   => t('Single node'),
    NL_LIST     => t('List of nodes'),
    NL_CAROUSEL => t('Carousel'),
    NL_CAROUSEL_ALT => t('Alternative carousel'),
  );

  $node_type = isset($conf['content_type']) ? $conf['content_type'] : current(array_keys($node_types));

  $default_conf = array(
    'content_type' => $node_type,
    'list_type' => NL_LIST,
    'node_format' => 'teaser',
    'columns' => NL_COL_FULL,
    'more_btn_text' => t('More'),
    'more_btn_link' => '',
    'teaser_length' => 100,
  );

  $form['#prefix'] = '<div id="ding_nodelist-form-wrapper">';
  $form['#suffix'] = '</div>';

//Forms for Manually settings
  $form['ding_nodelist_nodes'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#tree' => FALSE,
    '#title' => t('Manually controled list'),
    '#description' => t('Select the content of the list'),
    '#collapsible' => FALSE,
    '#prefix' => '<div class="clear-block" id="ding_nodelist-wrapper">',
    '#suffix' => '</div>',
    '#weight' => -3,
  );

  $form['content_type'] = array(
    '#type' => 'select',
    '#title' => t('Content type'),
    '#required' => TRUE,
    '#default_value' => isset($conf['content_type']) ? $conf['content_type'] : $default_conf['content_type'],
    '#options' => $node_types,
    '#description' => t('Select the content type of the list\'s items.'),
    '#weight' => -3,
    '#ajax' => array(
      'wrapper' => 'ding_nodelist-selected-nodes',
      'callback' => 'ding_nodelist_js',
      'method' => 'replace',
      'effect' => 'fade'
    ),
    '#weight' => -4,
  );

  $form['ding_nodelist_nodes']['title_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#description' => t('Enter a title to be shown above the node(s). Leave empty not to show anything.'),
      '#required' => FALSE,
      '#default_value' => isset($conf['title_text']) ? $conf['title_text'] : '',
      '#weight' => -2,
  );

  $form['ding_nodelist_nodes']['selected_nodes'] = array(
    '#prefix' => '<div id="ding_nodelist-selected-nodes">',
    '#suffix' => '</div>',
    '#theme' => 'ding_nodelist_list',
    '#tree' => TRUE,
    '#weight' => -1,
  );

  $form['ding_nodelist_nodes']['content_type_select'] = array(
    '#type' => 'submit',
    '#value' => t('Choose'),
    '#weight' => -2,
    '#submit' => array('ding_nodelist_more_submit'),
    '#ajax' => array(
      'wrapper' => 'ding_nodelist-selected-nodes',
      'callback' => 'ding_nodelist_js',
      'method' => 'replace',
      'effect' => 'fade'
    ),
    '#attributes' => array(
      'style' => 'display:none;',
    ),

  );

// Get all nodes'
  $delta = 0;
  $weight = 0;
  $max_weight = $weight;

// Check if form is ment to be rebuild thanks to an ajax request from the select element
  if (!empty($form_state['triggering_element']) && $form_state['triggering_element']['#name'] == 'content_type') {
    $node_count = 1;
    $node_type = $form_state['triggering_element']['#value'];
    $conf['selected_nodes'] = array();
    $form_state['values']['selected_nodes'] = array();
    $form_state['conf']['selected_nodes'] = array();
    unset($form_state['input']['selected_nodes']);

    $form_state['rebuild'] = TRUE;
  }

  if (isset($conf['selected_nodes']) && ($conf['content_type'] == $conf['selected_nodes'][0]['type'])) {
    $delta = count($conf['selected_nodes']);
    foreach ($conf['selected_nodes'] as $key => $node) {
      $weight = $node['weight'];
      $max_weight = ($max_weight < $weight) ? $weight : $max_weight;
      $form['ding_nodelist_nodes']['selected_nodes'][$key] = _ding_nodelist_selected_node($key, $node_type, $node, $weight, $node_count);
    }
  }

// Add new node field
  $existing_delta = $delta;
  $weight = ++$max_weight;
  for ($delta; $delta < $node_count; $delta ++) {
    $key = $delta;
    $form['ding_nodelist_nodes']['selected_nodes'][$key] = _ding_nodelist_selected_node($key, $node_type, NULL, $weight, $node_count);
  }

  $form['ding_nodelist_nodes']['ding_nodelist_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add more'),
    '#weight' => 1,
    '#submit' => array('ding_nodelist_more_submit'),
    '#ajax' => array(
      'wrapper' => 'ding_nodelist-selected-nodes',
      'callback' => 'ding_nodelist_js',
      'method' => 'replace',
      'effect' => 'fade'
    ),
  );

//Forms for Display settings
  $form['ding_nodelist_content'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display settings'),
    '#collapsible' => FALSE,
    '#description' => t('Define custom visualization settings'),
);

// Set up all the available view modes for this type of nodes
  $entity = entity_get_info('node');
  $node_formats = array();
  foreach ($entity['view modes'] as $view_mode => $settings) {
    $node_formats[$view_mode] = $settings['label'];
  }

  $form['ding_nodelist_content']['list_type'] = array(
    '#type' => 'select',
    '#title' => t('List type'),
    '#required' => TRUE,
    '#default_value' => isset($conf['list_type']) ? $conf['list_type'] : $default_conf['list_type'],
    '#options' => $list_types,
    '#description' => t('If single node selected, only the first node will be rendered')
  );

  $form['ding_nodelist_content']['node_format'] = array(
    '#type' => 'select',
    '#title' => t('Node format'),
    '#required' => TRUE,
    '#default_value' => isset($conf['node_format']) ? $conf['node_format'] : $default_conf['node_format'],
    '#options' => $node_formats,
    '#description' => t('Select how to display the nodes')
  );

  $form['ding_nodelist_content']['columns'] = array(
    '#type' => 'select',
    '#title' => 'Width (columns)',
    '#options' => array(
      NL_COL_FULL   => t('full width'),
      NL_COL_HALF   => '1/2',
      NL_COL_THIRD  => '1/3',
      NL_COL_QRT    => '1/4'
    ),
    '#default_value' => isset($conf['columns']) ? $conf['columns'] : $default_conf['columns']
  );

//Forms for Bottom settings
  $form['ding_nodelist_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bottom links'),
    '#collapsible' => FALSE,
    '#description' => t('Custom title text or "More" button'),
    '#weight' => -1,

    'more_text' => array(
      '#type' => 'textfield',
      '#title' => t('"More" button text'),
      '#required' => FALSE,
      '#default_value' => isset($conf['more_text']) ? $conf['more_text'] : $default_conf['more_text'],
    ),

    'more_link' => array(
      '#type' => 'textfield',
      '#title' => t('"More" button link'),
      '#required' => FALSE,
      '#description' => t('Enter local Drupal path or external URL starting with http(s).'),
      '#default_value' => isset($conf['more_link']) ? $conf['more_link'] : $default_conf['more_link'],
    ),
  );

//Forms for Dynamic list settings
  $form['ding_nodelist_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Dynamic list'),
    '#required' => FALSE,
    '#weight' => -2,
  );

  $form['ding_nodelist_settings']['title_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Enter a title to be shown above the node(s). Leave empty not to show anything.'),
    '#required' => FALSE,
    '#default_value' => isset($conf['title_text']) ? $conf['title_text'] : '',
  );

// Get an array of available vocabularies.
  $vocs = taxonomy_get_vocabularies();
  foreach ($vocs as $vid => $vocabulary) {
    $options[$vocabulary->name] = $vocabulary->name;
  }

  $form['ding_nodelist_settings']['tags'] = array(
    '#type' => 'select',
    '#title' => t('Choose a vocabulary'),
    '#options' => $options,
    '#default_value' => variable_get('ding_nodelist_settings', array()),
    '#description' => t('List of avaible vocabularies'),
  );

  $form['ding_nodelist_settings']['filters'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content options'),
    '#options' => array('Show sticky content first', 'Show "Promoted to front page" content only'),
    '#default_value' => variable_get('ding_nodelist_settings', array()),
  );

// Use custom title options.
  unset($form['override_title']);
  unset($form['override_title_text']);
  return $form;
}

function _ding_nodelist_selected_node($key, $type= 'player', $node = NULL, $weight = 0, $size = 10) {
  $form = array(
    '#tree' => TRUE,
    '#weight' => $weight,
  );

// Set default value for 'node'
  $node_default =  (!is_null($node) && isset($node['node'])) ? $node['node'] : '';
  $form['node'] = array(
    '#type' => 'textfield',
    '#title' => t('Select new node to add to list'),
    '#title_display' => 'invisible',
    '#autocomplete_path' => 'ding_nodelist/autocomplete/' . $type,
    '#parents' => array('selected_nodes', $key, 'node'),
    '#default_value' => $node_default,
  );

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => NULL,
    '#parents' => array('selected_nodes', $key, 'nid'),
  );

// Set default value for 'nid' if not empty field
  if (!is_null($node) && isset($node['nid']) && ctype_digit($node['nid'])) {
    $form['nid']['#value'] = $node['nid'];
  } elseif (!is_null($node) && isset($node['node'])) {
    $tmp_node = explode(':', $node);
    $tmp_node = array_pop($tmp_node);
    $tmp_node = substr($tmp_node, 0, -1);
    if (ctype_digit($tmp_node)) {
      $node['nid'] = $tmp_node;
    }
  }

  $form['type'] = array(
    '#type' => 'value',
    '#value' => $type,
    '#parents' => array('selected_nodes', $key, 'type'),
  );

  $form['weight'] = array(
    '#type' => 'weight',
    '#title' => $nid !== '' ? t('Weight for node @label', array('@label' => $nid)) : t('Weight for new choice'),
    '#title_display' => 'invisible',
    '#default_value' => $weight,
    '#delta' => 50,
    '#parents' => array('selected_nodes', $key, 'weight'),
  );

  return $form;
}

/**
 * Custom submit function to add more choices
 */
function ding_nodelist_more_submit(&$form, &$form_state) {
  // Add new node to list
  if ($form_state['values']['op'] == $form_state['values']['ding_nodelist_more']) {
    $form_state['values']['selected_nodes_count'] = count($form_state['values']['selected_nodes']) + 1;

    unset($form_state['input']['selected_nodes']);
  }

  // Change node types
  if ($form_state['values']['op'] == $form_state['values']['content_type_select']) {
    foreach ($form_state['values']['selected_nodes'] as $key => $node) {
      if (($node['type'] != $form_state['values']['content_type'])) {
        unset($form_state['values']['selected_nodes'][$key]);
      }
    }

    // Removing empty nodes
    foreach ($form_state['values']['selected_nodes'] as $key => $node) {
      if (empty($node['node'])) {
        unset($form_state['values']['selected_nodes'][$key]);
      }
    }

    unset($form_state['input']['selected_nodes']);
    unset($form_state['input']['content_type']);
  }

  foreach ($form_state['values']['selected_nodes'] as $key => $node) {
    if (!empty($node['node'])) {
      $tmp_nid = explode(':', $node['node']);
      $tmp_nid = array_pop($tmp_nid);
      $tmp_nid = substr($tmp_nid, 0, -1);
      // TODO: Implement more complex check for given title + ID
      if (ctype_digit($tmp_nid)) {
        $form_state['values']['selected_nodes'][$key]['nid'] = $tmp_nid;
      }
    }
  }
  // Saving all the values of the form
  $form_state['conf']['selected_nodes'] = $form_state['values']['selected_nodes'];
  $form_state['conf']['columns'] = $form_state['values']['columns'];
  $form_state['conf']['title_text'] = $form_state['values']['title_text'];
  $form_state['conf']['node_format'] = $form_state['values']['node_format'];
  $form_state['conf']['content_type'] = $form_state['values']['content_type'];
  $form_state['conf']['list_type'] = $form_state['values']['list_type'];
  $form_state['conf']['columns'] = $form_state['values']['columns'];
  $form_state['conf']['title_text'] = $form_state['values']['title_text'];
  $form_state['conf']['more_text'] = $form_state['values']['more_text'];
  $form_state['conf']['more_link'] = $form_state['values']['more_link'];

  $form_state['rebuild'] = TRUE;
}

function ding_nodelist_js($form, &$form_state) {
  return $form['ding_nodelist_nodes']['selected_nodes'];
}

/**
 * Autocomplete function that gives the available nodes
 */
function ding_nodelist_autocomplete($type = FALSE, $title = '') {
  $nodes = array();

  $result = db_query("SELECT nid, title FROM {node} WHERE type = :type AND title LIKE :title", array(':type' => $type, ':title' => '%' . $title . '%'));
  $nodes = $result->fetchAllKeyed();

  // Make a beatifull select
  $formatted_result = array();
  foreach ($nodes as $nid => $title) {
    $formatted_result[$title . " [nid:$nid]"] = $title;
  }

  drupal_json_output($formatted_result);
}

/**
 * Helper theming function
 */
function theme_ding_nodelist_list($variables) {
  $form = $variables['form'];

  drupal_add_tabledrag('ding_nodelist-selected-table', 'order', 'sibling', 'ding_nodelist-weight');

  $is_admin = user_access('administer nodes');
  $delta = 0;
  $rows = array();
  $headers = array('', t('Selected content'));
  $headers[] = t('Weight');

  foreach (element_children($form) as $key) {
    $delta++;
    // Set special classes for drag and drop updating.
    $form[$key]['weight']['#attributes']['class'] = array('ding_nodelist-weight');

    // Build the table row.
    $row = array(
      'data' => array(
        array('class' => array('choice-flag')),
        drupal_render($form[$key]['node']),
      ),
      'class' => array('draggable'),
    );
    $row['data'][] = drupal_render($form[$key]['weight']);

    // Add any additional classes set on the row.
    if (!empty($form[$key]['#attributes']['class'])) {
      $row['class'] = array_merge($row['class'], $form[$key]['#attributes']['class']);
    }

    $rows[] = $row;
  }

  $output = theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('id' => 'ding_nodelist-selected-table')));
  $output .= drupal_render_children($form);
  return $output;
}


/**
* Implements template_preprocess_hook
*/
function template_preprocess_ding_nodelist_single(&$variables){
	foreach ($variables['items'] as $nid => &$item) {
		if (!empty($variables['conf']['more_link_target'])) {
			$link = $variables['conf']['more_link_target'];
		}
		else {
			$link = 'node/' . $item->nid;
		}
		$image = array(
				'style_name' => 'single_story', // style name
				'path' => $item->field_page_image['und'][0]['filename'],
				'alt' => $item->title,
			'title' => $item->title,
			);
			$item->image_link =  l(theme('image_style', $image), $link, array('html' => TRUE));
			
			$item->title_link = l(truncate_utf8($item->title, 70, TRUE), $link);
			
	}
}

/**
 * Implements hook_theme().
 */
function ding_nodelist_theme($existing, $type, $theme, $path) {
  $path .= '/templates';
  
  $themes = array(
    'ding_nodelist_list' => array(
      'render element' => 'form',
    ),
    'ding_nodelist_single' => array(
      'path' => $path,
      'template' => 'ding_nodelist-single',
      'variables' => array('items' => NULL, 'conf' => NULL),
    ),
    'ding_nodelist_item_list' => array(
      'path' => $path,
      'template' => 'ding_nodelist-item-list',
      'variables' => array('items' => NULL, 'conf' => NULL),
    ),
    'ding_nodelist_carousel' => array(
      'path' => $path,
      'template' => 'ding_nodelist-carousel',
      'variables' => array('items' => NULL, 'conf' => NULL),
    ),
    'ding_nodelist_carousel_alt' => array(
      'path' => $path,
      'template' => 'ding_nodelist-carousel-alt',
      'variables' => array('items' => NULL, 'conf' => NULL),
    ),
  );

  return $themes;
}

/**
 * Run-time rendering of the body of the list.
 *
 * @param $subtype Content type sub-type
 * @param $conf Configuration as done at admin time.
 * @param $args
 * @param $context
 *
 * @return
 *   An object with at least title and content members.
 */
function ding_nodelist_content_type_render($subtype, $conf, $args, $context) {
  $block = new stdClass();

  $columns = $conf['columns'];

  // Prepare classes
  $classes = array();
  $classes[] = 'ding_nodelist';
  $classes[] = 'ding_nodelist-' . $conf['list_type'];
  $classes[] = 'ding_nodelist-col-' . $columns;

  // Build title
  $title = NULL;
  if (!empty($conf['title_text'])) {
    $title = check_plain($conf['title_text']);
  }

  // Build 'More' link
  $more = NULL;
  if (!empty($conf['more_link']) && !empty($conf['more_text'])) {
    $more = '<a class="ding_nodelist-more" href="' . url($conf['more_link']) . '">' . $conf['more_text'] . '</a>';
  }
	
	$more_link_target = !empty($conf['more_link']) ? $conf['more_link'] : NULL;
	
  // Load default CSS.
  drupal_add_css(drupal_get_path('module', 'ding_nodelist') . '/css/ding_nodelist.css', 'file');

  // Define if this is the last column pane and apply additional style.
  $map = ding_nodelist_get_column_map();
  $columns_layout = &drupal_static('ding_nodelist_cols', array());
  if (empty($columns_layout[$columns])) {
    $columns_layout[$columns] = 1;
    $classes[] = 'ding_nodelist-col-first';
  }
  else {
    $columns_layout[$columns]++;
  }

  if ($columns_layout[$columns] == $map[$columns]) {
    $classes[] = 'ding_nodelist-col-last';
    $columns_layout[$columns] = 0;
  }

  // Render the contents

  // This line may be removed after all nodelist panes are redefined
  $raw_nodes = isset($conf['selected_nodes']) ? $conf['selected_nodes'] : array();
  $node_list = array();

  // Sort the nodes according to their weight
  $tmp_array = array();
  foreach ($raw_nodes as $key => $node) {
    $tmp_array[$key] = $node['weight'];
  }
  asort($tmp_array);
  foreach ($tmp_array as $key => $weight) {
    $node_list []= $raw_nodes[$key]['nid'];
  }

  // If we have a single node, we don't need the other nodes
  // so we take only the first one
  if ($conf['list_type'] == NL_SINGLE) {
    $node_list = array_shift($node_list);
    $node_list = array($node_list);
  }

  // Special JS fopr carousel widgets
  if (in_array($conf['list_type'], array(NL_CAROUSEL, NL_CAROUSEL_ALT))) {
    $add_carousel_js = &drupal_static(__FUNCTION__ . '_js', TRUE);
    if ($add_carousel_js) {
      drupal_add_js(drupal_get_path('module', 'ding_nodelist') . '/js/jquery.carouFredSel-4.4.2.js', 'file');
      drupal_add_js(drupal_get_path('module', 'ding_nodelist') . '/js/carousel.js', 'file');
      $add_carousel_js = FALSE;
    }
  }

  $nodes = node_load_multiple($node_list);
  $theme_func = 'ding_nodelist_' . $conf['list_type'];
  $block->content = theme($theme_func,
    array('items' => $nodes,
          'conf' => array('more' => $more, 'more_link_target' => $more_link_target,
            'classes' => $classes, 'format' => $conf['node_format'])));

  return $block;
}


